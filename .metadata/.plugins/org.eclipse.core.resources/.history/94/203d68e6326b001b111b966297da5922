package com.app.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.app.dao.OffersDAO;
import com.app.dao.dbutil.PostgresqlConnection;
import com.app.exception.BusinessException;
import com.app.model.Offers;

public class OffersDAOImpl implements OffersDAO {

	@Override
	public int newOffer(Offers offer) throws BusinessException {
		int c = 0;
		
		try(Connection connection = PostgresqlConnection.getConnection()){
			String sql ="insert into public.offers(car_id,user_id,offer_made,asking_price,years) values(?,?,?,?,?)  ";
			PreparedStatement preparedStatement =connection.prepareStatement(sql);
			preparedStatement.setInt(1, offer.getCar_id());
			preparedStatement.setInt(2, offer.getUser_id());
			preparedStatement.setDouble(3,offer.getOffer_made() );
			preparedStatement.setDouble(4, offer.getAsking_price());
			preparedStatement.setInt(5, offer.getYears());
			
			c= preparedStatement.executeUpdate();
			
			
		} catch (SQLException e) {
			System.out.println(e);
			System.out.println("Entered invalid information please try again with valid offer infromation");
			throw new BusinessException("internal error occured contact sysadmin");
		}
		
		
		return c;
	}

	@Override
	public List<Offers> viewAllOffers() throws BusinessException {
		List<Offers> offersList = new ArrayList<>();
		
		try(Connection connection = PostgresqlConnection.getConnection()){
			String sql= "select * from public.offers";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet= preparedStatement.executeQuery();
			
			while(resultSet.next()) {
				Offers offers = new Offers();
				offers.setCar_id(resultSet.getInt("car_id"));
				offers.setUser_id(resultSet.getInt("user_id"));
				offers.setOffer_made(resultSet.getDouble("offer_made"));
				offers.setAsking_price(resultSet.getDouble("asking_price") );
				offers.setYears(resultSet.getInt("years"));
				offers.setAccepted(resultSet.getBoolean("accepted"));
				offers.setOffer_id(resultSet.getInt("offer_id"));
				offersList.add(offers);
			}
			
			if(offersList.size()==0) {
				throw new BusinessException("No offers in the database so far ");
			}
		}catch (SQLException e) {
			System.out.println(e);
			throw new BusinessException("internal error occured contact sysadmin");
		}
		
		
		
		return offersList;
	}

	@Override
	public List<Offers> viewStatus(int offer_id) throws BusinessException {
		
		List<Offers> offersList = new ArrayList<>();
		
		try(Connection connection = PostgresqlConnection.getConnection()){
			String sql= "select * from public.offers where offer_id = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, offer_id);
			ResultSet resultSet= preparedStatement.executeQuery();
			
			while(resultSet.next()) {
				Offers offers = new Offers();
				offers.setCar_id(resultSet.getInt("car_id"));
				offers.setUser_id(resultSet.getInt("user_id"));
				offers.setOffer_made(resultSet.getDouble("offer_made"));
				offers.setAsking_price(resultSet.getDouble("asking_price") );
				offers.setYears(resultSet.getInt("years"));
				offers.setAccepted(resultSet.getBoolean("accepted"));
				offers.setOffer_id(offer_id);
				offersList.add(offers);
			}
			
			if(offersList.size()==0) {
				throw new BusinessException("No offers in the database matching this offer ID so far ");
			}
		}catch (SQLException e) {
			System.out.println(e);
			throw new BusinessException("internal error occured contact sysadmin");
		}
		
		
		
		return offersList;
	}

	@Override
	public int acceptOffer(int offer_id,int months, double rate, int car_id) throws BusinessException {
		int c = 0;
		int c2 = 0;
		try(Connection connection = PostgresqlConnection.getConnection()){
			String sql ="update public.offers set accepted = true where offer_id=?  ";
			PreparedStatement preparedStatement =connection.prepareStatement(sql);
			preparedStatement.setInt(1, offer_id);
			
			c= preparedStatement.executeUpdate();
			
			if(c!=0) {
				String sql2 ="update public.account set remaining_months = ?,monthly_rate = ? where offer_id=? and car_id = ?  ";
				PreparedStatement preparedStatement2 =connection.prepareStatement(sql2);
				preparedStatement.setInt(1, months);
				preparedStatement.setDouble(2, rate);
				preparedStatement.setInt(3, offer_id);
				preparedStatement.setInt(4, car_id);
				c2= preparedStatement2.executeUpdate();
				
				connection.commit();
				connection.setAutoCommit(true);
			}
			
		} catch (SQLException e) {
			System.out.println(e);
			System.out.println("Entered invalid information please try again with valid offer infromation");
			throw new BusinessException("internal error occured contact sysadmin");
		}
		
		
		return c2;
	}

}
